package md2k.mCerebrum.cStress.tests;

import md2k.mCerebrum.cStress.Autosense.AUTOSENSE;
import md2k.mCerebrum.cStress.Autosense.SensorConfiguration;
import md2k.mCerebrum.cStress.Library;
import md2k.mCerebrum.cStress.Structs.DataPoint;
import md2k.mCerebrum.cStress.Structs.Lomb;
import md2k.mCerebrum.cStress.Structs.MaxMin;
import md2k.mCerebrum.cStress.Structs.PeakValley;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.util.ArrayList;

import static org.junit.Assert.*;

/**
 * Copyright (c) 2015, The University of Memphis, MD2K Center
 * - Timothy Hnat <twhnat@memphis.edu>
 * All rights reserved.
 * <p>
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * <p>
 * * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 * <p>
 * * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 * <p>
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class LibraryTest {


    @Before
    public void setUp() throws Exception {

    }

    @After
    public void tearDown() throws Exception {

    }

    @Test
    public void testComputeEnergy() throws Exception {

    }

    @Test
    public void testNextPower2() throws Exception {
        assertTrue(Library.nextPower2(0)==0);
        assertTrue(Library.nextPower2(1)==0);
        assertTrue(Library.nextPower2(20)==5);
        assertTrue(Library.nextPower2(255)==8);
        assertTrue(Library.nextPower2(1000)==10);
    }

    @Test
    public void testMagnitude() throws Exception {
        DataPoint[] x = new DataPoint[5];
        DataPoint[] y = new DataPoint[5];
        DataPoint[] z = new DataPoint[5];
        for(int i=0; i<x.length; i++) {
            x[i] = new DataPoint(i,i);
            y[i] = new DataPoint(i*i,i);
            z[i] = new DataPoint(i*i*i,i);
        }
        double[] result = Library.magnitude(x, y, z);

        double[] correctResult = {0, 1.73205080756888, 9.16515138991168, 28.6181760425084, 66.0908465674332};
        assertArrayEquals(result,correctResult,1e-3);

        DataPoint[] input = new DataPoint[0];
        double[] emptyresult = {};
        result = Library.magnitude(input, y, z);
        assertArrayEquals(result, emptyresult,1e-9);
    }

    @Test
    public void testCrossing() throws Exception {
        DataPoint[] input = new DataPoint[10]; //{0,1,4,9,16,25,36,49,64,81}
        input[0] = new DataPoint(1,0);
        input[1] = new DataPoint(3,1);
        input[2] = new DataPoint(4,2);
        input[3] = new DataPoint(-1,3);
        input[4] = new DataPoint(-4,4);
        input[5] = new DataPoint(7,5);
        input[6] = new DataPoint(3,6);
        input[7] = new DataPoint(1,7);
        input[8] = new DataPoint(3,8);
        input[9] = new DataPoint(9,9);

        double mean = 2.0;

        double[] result = Library.crossing(input, mean);

        double[] correctResult = {1,3,5,7,8};
        assertArrayEquals(result, correctResult,1e-9);

        result = Library.crossing(input, -10);
        double[] emptyresult = {};
        assertArrayEquals(result, emptyresult,1e-9);

        input = new DataPoint[0];
        result = Library.crossing(input, mean);
        assertArrayEquals(result, emptyresult,1e-9);
    }

    @Test
    public void testDiff() throws Exception {
        DataPoint[] input = new DataPoint[10];
        for(int i=0; i<input.length; i++) {
            input[i] = new DataPoint(i*i,i);
        }

        double[] result = Library.diff(input);

        double[] correctResult = {1,3,5,7,9,11,13,15,17};
        assertArrayEquals(result, correctResult,1e-9);

        DataPoint[] zeroinput = new DataPoint[0];
        result = Library.diff(zeroinput);
        assertTrue(result.length == 0);
    }

    @Test
    public void testApplyFilterNormalize() throws Exception {
        double[] data = new double[]{
                0.2077, 0.3012, 0.4709, 0.2305, 0.8443, 0.1948, 0.2259, 0.1707, 0.2277, 0.4357,
                0.3111, 0.9234, 0.4302, 0.1848, 0.9049, 0.9797, 0.4389, 0.1111, 0.2581, 0.4087,
                0.5949, 0.2622, 0.6028, 0.7112, 0.2217, 0.1174, 0.2967, 0.3188, 0.4242, 0.5079,
                0.0855, 0.2625, 0.8010, 0.0292, 0.9289, 0.7303, 0.4886, 0.5785, 0.2373, 2.4588,
                2.9631, 2.5468, 2.5211, 2.2316, 2.4889, 2.6241, 2.6791, 2.3955, 2.3674, 2.9880,
                2.0377, 2.8852, 2.9133, 2.7962, 2.0987, 2.2619, 2.3354, 2.6797, 2.1366, 2.7212,
                0.1068, 0.6538, 0.4942, 0.7791, 0.7150, 0.9037, 0.8909, 0.3342, 0.6987, 0.1978,
                0.0305, 0.7441, 0.50, 0.4799, 0.9047, 0.6099, 0.6177, 0.8594, 0.8055, 0.5767,
                0.1829, 0.2399, 0.8865, 0.0287, 0.4899, 0.1679, 0.9787, 0.7127, 0.505, 0.4711,
                0.0596, 0.6820, 0.0424, 0.0714, 0.5216, 0.0967, 0.8181, 0.8175, 0.7224, 0.1499};

        double[] filter = new double[]{0,0,0,0,1,1,1,1,1,0,0,0,0};

        double[] correctResult = new double[]{
                0.0784, 0.0968, 0.1643, 0.1633, 0.1572, 0.1332, 0.1330, 0.103, 0.1096, 0.1654,
                0.1862, 0.1827, 0.2202, 0.2737, 0.2350, 0.2094, 0.2153, 0.1756, 0.1449, 0.1307,
                0.1701, 0.2063, 0.1913, 0.1532, 0.1559, 0.1332, 0.1102, 0.1331, 0.1306, 0.1278,
                0.1664, 0.1348, 0.1685, 0.220, 0.2381, 0.2203, 0.2370, 0.3593, 0.5378, 0.7024,
                0.8577, 1.0172, 1.0196, 0.9925, 1.031, 0.9930, 1.039, 1.0438, 0.9969, 1.0134,
                1.0548, 1.0891, 1.0180, 1.0359, 0.9919, 0.9733, 0.9205, 0.9703, 0.7980, 0.6635,
                0.4888, 0.3802, 0.2198, 0.2835, 0.3025, 0.2897, 0.2833, 0.2419, 0.1721, 0.1603,
                0.1736, 0.1561, 0.2126, 0.2590, 0.2489, 0.2776, 0.3036, 0.2774, 0.2433, 0.2131,
                0.2152, 0.1531, 0.1462, 0.1450, 0.2040, 0.1901, 0.2279, 0.2264, 0.2177, 0.1940,
                0.1404, 0.1061, 0.1101, 0.1131, 0.1240, 0.1859, 0.2380, 0.2083, 0.205, 0.1351};
            
        double[] result = Library.applyFilterNormalize(data,filter,90);
        assertArrayEquals(correctResult,result,1e-1);
    }

    @Test
    public void testApplySquareFilterNormalize() throws Exception {
        double[] data = new double[]{
                0.2077, 0.3012, 0.4709, 0.2305, 0.8443, 0.1948, 0.2259, 0.1707, 0.2277, 0.4357,
                0.3111, 0.9234, 0.4302, 0.1848, 0.9049, 0.9797, 0.4389, 0.1111, 0.2581, 0.4087,
                0.5949, 0.2622, 0.6028, 0.7112, 0.2217, 0.1174, 0.2967, 0.3188, 0.4242, 0.5079,
                0.0855, 0.2625, 0.8010, 0.0292, 0.9289, 0.7303, 0.4886, 0.5785, 0.2373, 2.4588,
                2.9631, 2.5468, 2.5211, 2.2316, 2.4889, 2.6241, 2.6791, 2.3955, 2.3674, 2.9880,
                2.0377, 2.8852, 2.9133, 2.7962, 2.0987, 2.2619, 2.3354, 2.6797, 2.1366, 2.7212,
                0.1068, 0.6538, 0.4942, 0.7791, 0.7150, 0.9037, 0.8909, 0.3342, 0.6987, 0.1978,
                0.0305, 0.7441, 0.50, 0.4799, 0.9047, 0.6099, 0.6177, 0.8594, 0.8055, 0.5767,
                0.1829, 0.2399, 0.8865, 0.0287, 0.4899, 0.1679, 0.9787, 0.7127, 0.505, 0.4711,
                0.0596, 0.6820, 0.0424, 0.0714, 0.5216, 0.0967, 0.8181, 0.8175, 0.7224, 0.1499};

        double[] correctResult = new double[]{
                0.00671839822402745, 0.0141287156412916, 0.0345342580855585, 0.00827436374687981, 0.111016192404356,
                0.00590977102643782, 0.00794740254822651, 0.00453795089040273, 0.00807455897064222, 0.0295643182925625,
                0.015072759569749, 0.132792176709209, 0.0288226270032061, 0.0053185920882029, 0.127524587042103,
                0.149478580682623, 0.0300001834975195, 0.00192229867813768, 0.0103745378265731, 0.0260136938518274,
                0.0551163801967219, 0.0107067613899058, 0.0565899404214741, 0.0787727931961658, 0.00765462881019527,
                0.00214649036426415, 0.0137096965442768, 0.0158281214827087, 0.028024255109379, 0.040174379254036,
                0.00113847888125179, 0.0107312760044125, 0.0999212323367918, 0.000132787884588151, 0.134378774209238,
                0.0830606548383664, 0.0371791686716713, 0.052119408225055, 0.00876977045122196, 0.941540830734658,
                1.36736785625478, 1.01014200718464, 0.989857992815362, 0.775577952652726, 0.964734133839088,
                1.07239186766248, 1.11781671170584, 0.893686298877964, 0.8728428043484, 1.39044538733626,
                0.646655893977508, 1.2964166391813, 1.32179214633653, 1.21766889477871, 0.685951601608438,
                0.796782066334614, 0.849405954521372, 1.11831745085666, 0.71095022751843, 1.15322400528021,
                0.00177637746376519, 0.0665706169607485, 0.0380362971486958, 0.0945320678734937, 0.0796168210482471,
                0.127186587180873, 0.12360916345887, 0.0173942473095469, 0.0760281172707924, 0.00609319846412304,
                0.000144874659455488, 0.0862293988652798, 0.0389343347098866, 0.0358669336414763, 0.12746822258443,
                0.0579308653842302, 0.0594220940100737, 0.115022670937488, 0.101047096493598, 0.0517955742321656,
                0.00520978931116943, 0.00896299688226696, 0.122391210256235, 0.000128279288628746, 0.0373772743535422,
                0.00439029943419574, 0.14917358467824, 0.0791054247913263, 0.0397169148375553, 0.0345635990001959,
                0.000553203945532283, 0.0724371739904052, 0.000279978358272183, 0.000793942723910454,
                0.0423709220416298, 0.00145628272438133, 0.10423307129968, 0.104080236904837, 0.081273361744522,
                0.003499419561098};

        double[] result = Library.applySquareFilterNormalize(data,90);
        assertArrayEquals(correctResult,result,1e-1);
    }

    @Test
    public void testBlackman() throws Exception {
        double[] trueBlackman10;
        double[] result;
        double sum;

        //Test window of length 10
        int windowLength = 10;
        trueBlackman10 = new double[]{ 0, 0.0509, 0.2580, 0.630, 0.9511, 0.9511, 0.630, 0.2580, 0.0509, 0};

        result = Library.blackman(windowLength);

        sum = 0.0;
        for(int i=0; i<result.length; i++) {
            sum += Math.abs(result[i]-trueBlackman10[i]);
        }
        assertEquals(sum,0.0,1e-3);

        //Test window of length 0
        windowLength = 0;
        result = Library.blackman(windowLength);
        assertArrayEquals(result,new double[0],1e-4);
    }

    @Test
    public void testFirls() throws Exception {
        //Currently has a hard-coded filter output
    }

    @Test
    public void testConv() throws Exception {
        double[] signal = {1,2,3,2,1};
        double[] kernel = {1,0,1};
        double[] trueAnswer = {2,4,4,4,2};

        double[] result = Library.conv(signal, kernel);

        assertArrayEquals(result,trueAnswer,1e-3);
    }

    @Test
    public void testLocalMaxMin() throws Exception {
        double[] data = new double[]{
                0.2077, 0.3012, 0.4709, 0.2305, 0.8443, 0.1948, 0.2259, 0.1707, 0.2277, 0.4357,
                0.3111, 0.9234, 0.4302, 0.1848, 0.9049, 0.9797, 0.4389, 0.1111, 0.2581, 0.4087,
                0.5949, 0.2622, 0.6028, 0.7112, 0.2217, 0.1174, 0.2967, 0.3188, 0.4242, 0.5079,
                0.0855, 0.2625, 0.8010, 0.0292, 0.9289, 0.7303, 0.4886, 0.5785, 0.2373, 2.4588,
                2.9631, 2.5468, 2.5211, 2.2316, 2.4889, 2.6241, 2.6791, 2.3955, 2.3674, 2.9880,
                2.0377, 2.8852, 2.9133, 2.7962, 2.0987, 2.2619, 2.3354, 2.6797, 2.1366, 2.7212,
                0.1068, 0.6538, 0.4942, 0.7791, 0.7150, 0.9037, 0.8909, 0.3342, 0.6987, 0.1978,
                0.0305, 0.7441, 0.50, 0.4799, 0.9047, 0.6099, 0.6177, 0.8594, 0.8055, 0.5767,
                0.1829, 0.2399, 0.8865, 0.0287, 0.4899, 0.1679, 0.9787, 0.7127, 0.505, 0.4711,
                0.0596, 0.6820, 0.0424, 0.0714, 0.5216, 0.0967, 0.8181, 0.8175, 0.7224, 0.1499};
        DataPoint[] dpInput = new DataPoint[data.length];
        for(int i=0; i<dpInput.length; i++) {
            dpInput[i] = new DataPoint(data[i],i);
        }

        MaxMin correctResult = new MaxMin();
        correctResult.maxtab = new DataPoint[1];
        correctResult.mintab = new DataPoint[1];
        correctResult.maxtab[0] = new DataPoint(2.9880, 49);
        //correctResult.mintab[0] = new DataPoint(2.9880, 49); //Unknown result here


        MaxMin result = Library.localMaxMin(dpInput, 1); //TODO: Debugging yields a failed result right now.

        //TODO: Complete assertions here
    }

    @Test
    public void testSmooth() throws Exception {
        double[] inputdata = {1, 2, 3, 4, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5,
                -4, -3, -2, -1, 0, 3, 5, 3, 0, -3, -5, -3, 0};

        double[] correctResult = {1.0, 2.0, 3.0, 3.60, 3.80, 3.60, 3.0, 2.0, 1.0, 0.0, -1.0,
                -2.0, -3.0, -3.60, -3.80, -3.60, -3.0, -2.0, -0.60, 1.0, 2.0, 2.20, 1.60, 0, -1.60, -2.20, -2.6667, 0};

        DataPoint[] inputdp = new DataPoint[inputdata.length];
        for(int i = 0; i<inputdata.length; i++) {
            inputdp[i] = new DataPoint(inputdata[i],i);
        }

        DataPoint[] result = Library.smooth(inputdp, 5);
        double sum = 0.0;
        for(int i=0; i< result.length; i++) {
            sum += Math.abs(result[i].value-correctResult[i]);
        }
        assertTrue(sum < 1e-4);
    }

    @Test
    public void testWindow() throws Exception {

    }

    @Test
    public void testDetect_outlier_v2() throws Exception {
        double[] inputValue = new double[] {
                1.71875, 1.046875, 0.5625, 0.5625, 0.578125, 0.59375, 0.578125, 0.5625, 0.5625, 0.546875, 0.546875,
                0.546875, 0.5625, 0.5625, 0.578125, 0.625, 0.671875, 0.625, 0.71875, 0.65625, 0.65625, 0.53125,
                0.59375, 0.609375, 0.578125, 0.5625, 0.5625, 0.546875, 0.546875, 0.5625, 0.546875, 0.546875, 0.578125,
                0.5625, 0.578125, 0.578125, 0.578125, 0.578125, 0.5625, 0.5625, 0.546875, 0.5625, 0.5625, 0.578125,
                0.578125, 0.59375, 0.5625, 0.59375, 0.578125, 0.59375, 0.59375, 0.578125, 0.578125, 0.578125,
                0.578125, 0.578125, 0.578125, 0.578125, 0.578125, 1.71875, 0.5625, 0.546875, 0.5625, 0.625, 0.640625,
                0.640625, 0.671875, 0.671875, 0.640625, 0.625, 0.59375, 0.578125, 0.5625, 0.546875, 0.578125,
                0.609375, 0.6875, 0.671875, 0.6875, 0.75, 0.65625, 0.640625, 0.546875, 0.671875, 1.0625, 0.5625,
                0.5625, 0.5625, 0.5625, 0.578125, 0.578125, 0.609375, 0.640625, 0.6875, 0.640625, 0.609375, 0.578125,
                0.578125, 0.640625, 1.015625
        };

        long[] inputTimestamps = new long[100];
        for(int i=0; i<inputTimestamps.length; i++) {
            inputTimestamps[i] = i;
        }

        int[] correctResult = new int[]{
                0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
        };

        int[] result = Library.detect_outlier_v2(inputValue,inputTimestamps);

        assertArrayEquals(correctResult,result);
    }

    @Test
    public void testDetect_Rpeak() throws Exception {
        double frequency = 64.0;

        double[] inputValues = new double[] {
                2305, 2615, 1917, 1719, 1728, 1779, 1766, 1748, 1827, 1808, 1867, 1835, 1845, 1818, 1808, 1875, 1877,
                1809, 1879, 1840, 1885, 1848, 1853, 1916, 1904, 1918, 1890, 1906, 1845, 1856, 1839, 1875, 1820, 1806,
                2880, 1906, 1891, 1885, 1911, 1856, 1790, 1697, 1706, 1655, 1680, 1777, 1734, 1757, 1802, 1824, 1902,
                1870, 1921, 1826, 1888, 1822, 1849, 1846, 1900, 1920, 1876, 1815, 2709, 2381, 1872, 1687, 1697, 1783,
                1721, 1776, 1770, 1765, 1860, 1827, 1792, 1830, 1885, 1808, 1820, 1808, 1834, 1840, 1823, 1824, 1824,
                1869, 1862, 1857, 1874, 1872, 1822, 1807, 1885, 1850, 1904, 1914, 1910, 1792, 2703, 2528, 1792, 1763,
                1823, 1846, 1840, 1852, 1790, 1814, 1850, 1840, 1794, 1837, 1809, 1898, 1808,
                1809.17724867725, 1812.65608465608, 1818.35714285714, 1826.20105820106, 1836.10846560847,
                1848, 1878, 1877, 1903, 1856, 1895, 1885, 1820, 1876, 2992, 2285, 1692, 1651, 1696, 1648, 1674, 1719,
                1795, 1776, 1808, 1830, 1815, 1782, 1795, 1840, 1791, 1879, 1799, 1819, 1856, 1831, 1899, 1894, 1851,
                1872, 1895, 1933, 1864, 1928, 1920, 1946, 1906, 1725, 1797, 2096, 3075, 2246, 1755, 1658, 1744, 1681,
                1703, 1732, 1763, 1808, 1815, 1774, 1808, 1743, 1824, 1849, 1834, 1824, 1879, 1808, 1873, 1810, 1879,
                1847, 1808, 1898, 1893, 1849, 1821, 1840, 1840, 1910, 1897, 1834, 1824
        };

        DataPoint[] inputDatapoints = new DataPoint[inputValues.length];
        for(int i=0; i<inputValues.length; i++) {
            inputDatapoints[i] = new DataPoint(inputValues[i],i);
        }

        long[] correctResult = new long[]{2, 62, 129, 165};

        long[] result = Library.detect_Rpeak(inputDatapoints, frequency);

        assertArrayEquals(correctResult,result);
    }

    @Test
    public void testRr_ave_update() throws Exception {

        int[] rawData = new int[] {3, 34, 64, 100, 130, 166, 202, 239, 277, 314, 350, 386, 421, 456};
        
        ArrayList<Integer> inputData = new ArrayList<Integer>();
        for(int i: rawData) {
            inputData.add(i);
        }

        double rr_value = 36.375;

        double correctResult = 36.25;

        double result = Library.rr_ave_update(inputData,rr_value);

        assertEquals(correctResult, result, 1e-9);
    }

    @Test
    public void testLomb() throws Exception {
        double[] inputdata = new double[]{
                -0.917924476813228, -0.917924476813228, -0.753862625145271, -0.589800773477313, -0.753862625145271,
                -0.917924476813228, -0.917924476813228, -1.08198632848119, -1.08198632848119, -1.08198632848119,
                -0.917924476813228, -0.917924476813228, -0.753862625145271, -0.261677070141398, 0.230508484862474,
                -0.261677070141398, 0.722694039866347, 0.0664466331945169, 0.0664466331945169, -1.24604818014914,
                -0.589800773477313, -0.425738921809356, -0.753862625145271, -0.917924476813228, -0.917924476813228,
                -1.08198632848119, -1.08198632848119, -0.917924476813228, -1.08198632848119, -1.08198632848119,
                -0.753862625145271, -0.917924476813228, -0.753862625145271, -0.753862625145271, -0.753862625145271,
                -0.753862625145271, -0.917924476813228, -0.917924476813228, -1.08198632848119, -0.917924476813228,
                -0.917924476813228, -0.753862625145271, -0.753862625145271, -0.589800773477313, -0.917924476813228,
                -0.589800773477313, -0.753862625145271, -0.589800773477313, -0.589800773477313, -0.753862625145271,
                -0.753862625145271, -0.753862625145271, -0.753862625145271, -0.753862625145271, -0.753862625145271,
                -0.753862625145271, -0.753862625145271, -0.917924476813228, -1.08198632848119, -0.917924476813228,
                -0.261677070141398, -0.0976152184734407, -0.0976152184734407, 0.230508484862474, 0.230508484862474,
                -0.0976152184734407, -0.261677070141398, -0.589800773477313, -0.753862625145271, -0.917924476813228,
                -1.08198632848119, -0.753862625145271, -0.425738921809356, 0.394570336530432, 0.230508484862474,
                0.394570336530432, 1.05081774320226, 0.0664466331945169, -0.0976152184734407, -1.08198632848119,
                0.230508484862474, 4.33205477656141, -0.917924476813228, -0.917924476813228, -0.917924476813228,
                -0.917924476813228, -0.753862625145271, -0.753862625145271, -0.425738921809356, -0.0976152184734407,
                0.394570336530432, -0.0976152184734407, -0.425738921809356};

        DataPoint[] input = new DataPoint[inputdata.length];
        for(int i=0; i<input.length; i++) {
            input[i] = new DataPoint(inputdata[i],i+1);
        }

        Lomb result = Library.lomb(input);

        double[] correctResultP = new double[] {
                4.67921414136144, 4.9918173202647, 5.82786784021648, 5.63086219140335, 3.85843656513102,
                3.25177724990639, 2.74571579293217, 1.24010595520756, 0.126104480324749, 0.31854088965193,
                1.61384437636993, 2.32314673318736, 1.79114111736095, 0.81226822234912, 0.412459487127602,
                1.2357994941312, 2.38377588999756, 2.66772187257514, 1.57229344747761, 0.209501539515911,
                0.360120787556712, 2.45809323474862, 4.96214245158792, 5.5209523594057, 4.01914823613531,
                1.78549061486487, 0.547517383550135, 0.83356503645311, 1.55070110008783, 1.61818357297738,
                0.858548836516559, 0.152383833216177, 0.0359116563895136, 0.128192201699579, 0.0301443433090243,
                0.122614378340868, 0.991273688890313, 2.1752550164769, 2.55640544027612, 1.79371783214765,
                0.811483013815188, 0.879173994973389, 1.74313692641656, 2.31941846950287, 1.95082811049457,
                1.1901228989317, 0.785668669533728, 0.792934991911251, 0.964206575885427, 1.07510877449472,
                1.10559542184177, 0.942348203623467, 0.750512862844883, 0.809116854118117, 1.24402984968616,
                1.64913048666162, 1.49168802138273, 0.835115271493764, 0.243840468844885, 0.239109953831388,
                0.655424873061819, 0.920946316154778, 0.724736310035187, 0.337567411491088, 0.24377978778768,
                0.502578814607277, 0.796746131356234, 0.841102058028839, 0.74460209423957, 0.693262484147578,
                0.693274097258448, 0.740674417806035, 0.948356814463732, 1.39131139981509, 1.6556031735549,
                1.38495169346124, 0.775829923211945, 0.568523102936685, 1.04335785236737, 1.59144503258897,
                1.51838304128271, 0.929130383451798, 0.635354320914837, 0.988525381309064, 1.62498222250744,
                1.90332036343325, 1.73271727847712, 1.35984760778451, 1.04205442941426, 0.934515714784768,
                1.02096510871049, 1.21766546522226, 1.20228073473993, 0.852986889512837, 0.403786097131796,
                0.283095183705155, 0.586808784966944, 0.887128011975811, 0.77760396379931, 0.346839258649854,
                0.148317219843383, 0.460827513946637, 0.965270873457532, 1.09419071466221, 0.729270267558226,
                0.326546044321516, 0.302039953493521, 0.626885853423103, 0.88212652609271, 0.825450431231665,
                0.53380676099569, 0.277637081059907, 0.235886033261577, 0.383269250829952, 0.566844983767095,
                0.601255514597881, 0.460498960812623, 0.272825118910204, 0.270776828052624, 0.483953496437506,
                0.751873599846752, 0.859637159962459, 0.809939956181541, 0.72147482826175, 0.640762379014475,
                0.580115607599051, 0.527138081882833, 0.567045569147096, 0.649599929629271, 0.67535828560067,
                0.563051892142837, 0.426509955375219, 0.444202218631274, 0.62061386657057, 0.800872478371616,
                0.77618918582282, 0.591425250468233, 0.399748105098098, 0.396393780601866, 0.590448076991075,
                0.836207847946407, 0.944252994364163, 0.829988357666191, 0.693517159501687, 0.692322890432624,
                0.878586973475927, 0.984408903826885, 0.80342155622685, 0.469623895487054, 0.327574012792455,
                0.60372097063119, 0.991024903546646, 1.08812835189268, 0.733130956592615, 0.340437861822605,
                0.310671864145908, 0.608463471451749, 0.856421850178353, 0.74230311634726, 0.420804121965433,
                0.151673589289348, 0.181138173571597, 0.434363254069844, 0.687973625809582, 0.675747579786264,
                0.399611975331429, 0.138238122569294, 0.119232961729591, 0.318697971915615, 0.419682309304213,
                0.285849051349879, 0.0710438414749163, 0.134260843032924, 0.470081811162584, 0.783366102800891,
                0.680815755357774, 0.288768938291217, 0.0247809026203046, 0.0792887566553566, 0.337032773858422,
                0.41451115768105, 0.399459379483128, 0.385932427703259, 1.55802947559688, 0.38593242770324,
                0.399459379483129};

        double[] correctResultF = new double[] {
                0.00271739130434783, 0.00543478260869565, 0.00815217391304348, 0.0108695652173913, 0.0135869565217391,
                0.016304347826087, 0.0190217391304348, 0.0217391304347826, 0.0244565217391304, 0.0271739130434783,
                0.0298913043478261, 0.0326086956521739, 0.0353260869565217, 0.0380434782608696, 0.0407608695652174,
                0.0434782608695652, 0.046195652173913, 0.0489130434782609, 0.0516304347826087, 0.0543478260869565,
                0.0570652173913043, 0.0597826086956522, 0.0625, 0.0652173913043478, 0.0679347826086956,
                0.0706521739130435, 0.0733695652173913, 0.0760869565217391, 0.078804347826087, 0.0815217391304348,
                0.0842391304347826, 0.0869565217391304, 0.0896739130434783, 0.0923913043478261, 0.0951086956521739,
                0.0978260869565217, 0.10054347826087, 0.103260869565217, 0.105978260869565, 0.108695652173913,
                0.111413043478261, 0.114130434782609, 0.116847826086957, 0.119565217391304, 0.122282608695652,
                0.125, 0.127717391304348, 0.130434782608696, 0.133152173913043, 0.135869565217391, 0.138586956521739,
                0.141304347826087, 0.144021739130435, 0.146739130434783, 0.14945652173913, 0.152173913043478,
                0.154891304347826, 0.157608695652174, 0.160326086956522, 0.16304347826087, 0.165760869565217,
                0.168478260869565, 0.171195652173913, 0.173913043478261, 0.176630434782609, 0.179347826086957,
                0.182065217391304, 0.184782608695652, 0.1875, 0.190217391304348, 0.192934782608696, 0.195652173913043,
                0.198369565217391, 0.201086956521739, 0.203804347826087, 0.206521739130435, 0.209239130434783,
                0.21195652173913, 0.214673913043478, 0.217391304347826, 0.220108695652174, 0.222826086956522,
                0.22554347826087, 0.228260869565217, 0.230978260869565, 0.233695652173913, 0.236413043478261,
                0.239130434782609, 0.241847826086957, 0.244565217391304, 0.247282608695652, 0.25, 0.252717391304348,
                0.255434782608696, 0.258152173913043, 0.260869565217391, 0.263586956521739, 0.266304347826087,
                0.269021739130435, 0.271739130434783, 0.27445652173913, 0.277173913043478, 0.279891304347826,
                0.282608695652174, 0.285326086956522, 0.28804347826087, 0.290760869565217, 0.293478260869565,
                0.296195652173913, 0.298913043478261, 0.301630434782609, 0.304347826086957, 0.307065217391304,
                0.309782608695652, 0.3125, 0.315217391304348, 0.317934782608696, 0.320652173913043, 0.323369565217391,
                0.326086956521739, 0.328804347826087, 0.331521739130435, 0.334239130434783, 0.33695652173913,
                0.339673913043478, 0.342391304347826, 0.345108695652174, 0.347826086956522, 0.35054347826087,
                0.353260869565217, 0.355978260869565, 0.358695652173913, 0.361413043478261, 0.364130434782609,
                0.366847826086957, 0.369565217391304, 0.372282608695652, 0.375, 0.377717391304348, 0.380434782608696,
                0.383152173913043, 0.385869565217391, 0.388586956521739, 0.391304347826087, 0.394021739130435,
                0.396739130434783, 0.39945652173913, 0.402173913043478, 0.404891304347826, 0.407608695652174,
                0.410326086956522, 0.41304347826087, 0.415760869565217, 0.418478260869565, 0.421195652173913,
                0.423913043478261, 0.426630434782609, 0.429347826086957, 0.432065217391304, 0.434782608695652,
                0.4375, 0.440217391304348, 0.442934782608696, 0.445652173913043, 0.448369565217391, 0.451086956521739,
                0.453804347826087, 0.456521739130435, 0.459239130434783, 0.46195652173913, 0.464673913043478,
                0.467391304347826, 0.470108695652174, 0.472826086956522, 0.47554347826087, 0.478260869565217,
                0.480978260869565, 0.483695652173913, 0.486413043478261, 0.489130434782609, 0.491847826086957,
                0.494565217391304, 0.497282608695652, 0.5, 0.502717391304348, 0.505434782608696};


        assertArrayEquals(correctResultF,result.f,1e-4);

        assertArrayEquals(correctResultP,result.P,1e-4);


    }

    @Test
    public void testHeartRateLFHF() throws Exception {
        double[] inputdata = new double[]{
                -0.917924476813228, -0.917924476813228, -0.753862625145271, -0.589800773477313, -0.753862625145271,
                -0.917924476813228, -0.917924476813228, -1.08198632848119, -1.08198632848119, -1.08198632848119,
                -0.917924476813228, -0.917924476813228, -0.753862625145271, -0.261677070141398, 0.230508484862474,
                -0.261677070141398, 0.722694039866347, 0.0664466331945169, 0.0664466331945169, -1.24604818014914,
                -0.589800773477313, -0.425738921809356, -0.753862625145271, -0.917924476813228, -0.917924476813228,
                -1.08198632848119, -1.08198632848119, -0.917924476813228, -1.08198632848119, -1.08198632848119,
                -0.753862625145271, -0.917924476813228, -0.753862625145271, -0.753862625145271, -0.753862625145271,
                -0.753862625145271, -0.917924476813228, -0.917924476813228, -1.08198632848119, -0.917924476813228,
                -0.917924476813228, -0.753862625145271, -0.753862625145271, -0.589800773477313, -0.917924476813228,
                -0.589800773477313, -0.753862625145271, -0.589800773477313, -0.589800773477313, -0.753862625145271,
                -0.753862625145271, -0.753862625145271, -0.753862625145271, -0.753862625145271, -0.753862625145271,
                -0.753862625145271, -0.753862625145271, -0.917924476813228, -1.08198632848119, -0.917924476813228,
                -0.261677070141398, -0.0976152184734407, -0.0976152184734407, 0.230508484862474, 0.230508484862474,
                -0.0976152184734407, -0.261677070141398, -0.589800773477313, -0.753862625145271, -0.917924476813228,
                -1.08198632848119, -0.753862625145271, -0.425738921809356, 0.394570336530432, 0.230508484862474,
                0.394570336530432, 1.05081774320226, 0.0664466331945169, -0.0976152184734407, -1.08198632848119,
                0.230508484862474, 4.33205477656141, -0.917924476813228, -0.917924476813228, -0.917924476813228,
                -0.917924476813228, -0.753862625145271, -0.753862625145271, -0.425738921809356, -0.0976152184734407,
                0.394570336530432, -0.0976152184734407, -0.425738921809356};

        DataPoint[] input = new DataPoint[inputdata.length];
        for(int i=0; i<input.length; i++) {
            input[i] = new DataPoint(inputdata[i],i+1);
        }

        Lomb result = Library.lomb(input);

        double resultLFHF = Library.heartRateLFHF(result.P, result.f, 0.09, 0.15);
        assertEquals(2.87724349469217, resultLFHF, 1e-8);


    }

    @Test
    public void testHeartRatePower() throws Exception {
        double[] inputdata = new double[]{
                -0.917924476813228, -0.917924476813228, -0.753862625145271, -0.589800773477313, -0.753862625145271,
                -0.917924476813228, -0.917924476813228, -1.08198632848119, -1.08198632848119, -1.08198632848119,
                -0.917924476813228, -0.917924476813228, -0.753862625145271, -0.261677070141398, 0.230508484862474,
                -0.261677070141398, 0.722694039866347, 0.0664466331945169, 0.0664466331945169, -1.24604818014914,
                -0.589800773477313, -0.425738921809356, -0.753862625145271, -0.917924476813228, -0.917924476813228,
                -1.08198632848119, -1.08198632848119, -0.917924476813228, -1.08198632848119, -1.08198632848119,
                -0.753862625145271, -0.917924476813228, -0.753862625145271, -0.753862625145271, -0.753862625145271,
                -0.753862625145271, -0.917924476813228, -0.917924476813228, -1.08198632848119, -0.917924476813228,
                -0.917924476813228, -0.753862625145271, -0.753862625145271, -0.589800773477313, -0.917924476813228,
                -0.589800773477313, -0.753862625145271, -0.589800773477313, -0.589800773477313, -0.753862625145271,
                -0.753862625145271, -0.753862625145271, -0.753862625145271, -0.753862625145271, -0.753862625145271,
                -0.753862625145271, -0.753862625145271, -0.917924476813228, -1.08198632848119, -0.917924476813228,
                -0.261677070141398, -0.0976152184734407, -0.0976152184734407, 0.230508484862474, 0.230508484862474,
                -0.0976152184734407, -0.261677070141398, -0.589800773477313, -0.753862625145271, -0.917924476813228,
                -1.08198632848119, -0.753862625145271, -0.425738921809356, 0.394570336530432, 0.230508484862474,
                0.394570336530432, 1.05081774320226, 0.0664466331945169, -0.0976152184734407, -1.08198632848119,
                0.230508484862474, 4.33205477656141, -0.917924476813228, -0.917924476813228, -0.917924476813228,
                -0.917924476813228, -0.753862625145271, -0.753862625145271, -0.425738921809356, -0.0976152184734407,
                0.394570336530432, -0.0976152184734407, -0.425738921809356};

        DataPoint[] input = new DataPoint[inputdata.length];
        for(int i=0; i<input.length; i++) {
            input[i] = new DataPoint(inputdata[i],i+1);
        }

        Lomb result = Library.lomb(input);

        double result12 = Library.heartRatePower(result.P, result.f, 0.1, 0.2);
        assertEquals(38.1822734085174, result12, 1e-8);

        double result23 = Library.heartRatePower(result.P,result.f,0.2,0.3);
        assertEquals(35.0199378177408, result23, 1e-8);

        double result34 = Library.heartRatePower(result.P,result.f,0.3,0.4);
        assertEquals(22.3384393631384, result34, 1e-8);

    }

    @Test
    public void testPeakvalley_v2() throws Exception {

        double[] inputData = new double[] {
                2062, 2009, 1960, 1921, 1872, 1784, 1787, 1789, 1797, 1792, 1801, 1757, 1730, 1715, 1696, 1689, 1700, 1710, 1694, 1664, 1652, 1648, 1631, 1637, 1632, 1657, 1667, 1663, 1658, 1664, 1649, 1640, 1582, 1510, 1456, 1456, 1446, 1354, 1291, 1296, 1358, 1405, 1465, 1564, 1680, 1798, 1851, 1919, 2004, 2064, 2090, 2103, 2078, 2104, 2128, 2187, 2275, 2372, 2401, 2384, 2397, 2401, 2369, 2316, 2240, 2239, 2214, 2157, 2107, 2000, 1898, 1928, 1937, 1870, 1872, 1929, 1981, 2049, 2095, 2112, 2122, 2098, 2111, 2122, 2064, 2019, 1954, 1902, 1865, 1840, 1855, 1894, 1966, 2091, 2192, 2314, 2409, 2455, 2469, 2464, 2494, 2509, 2558, 2613, 2656, 2719, 2726, 2699, 2636, 2544, 2434, 2312, 2178, 2066, 1968, 1926, 1871, 1821, 1772, 1728, 1721, 1714, 1699, 1695, 1696, 1750, 1773, 1799, 1825, 1824, 1837, 1868, 1908, 1955, 1984, 2054, 2132, 2227, 2342, 2464, 2596, 2741, 2875, 2982, 3056, 3139, 3179, 3214, 3227, 3216, 3168, 3062, 2950, 2835, 2720, 2649, 2547, 2419, 2258, 2128, 1980, 1845, 1736, 1651, 1600, 1556, 1549, 1547, 1530, 1488, 1445, 1417, 1389, 1393, 1392, 1386, 1371, 1386, 1463, 1552, 1683, 1742, 1749, 1757, 1792, 1883, 1994, 2107, 2228, 2352, 2478, 2577, 2685, 2775, 2832, 2861, 2854, 2835, 2851, 2864, 2850, 2817, 2758, 2712, 2624, 2545, 2445, 2346, 2229, 2128, 2026, 1910, 1794, 1663, 1520, 1489.32846145564, 1473.26218776916, 1464.44869186047, 1455.53548664944, 1439.17008505599, 1408, 1252, 1123, 1033, 1024, 1026.2668657738, 1032.69841492059, 1042.7410751785, 1055.84127428563, 1071.44543998009, 1089, 1121, 1150, 1192, 1200, 1249, 1301, 1359, 1421, 1456, 1522, 1562, 1615, 1660, 1728, 1820, 1900, 1991, 2073, 2160, 2282, 2399, 2494, 2585, 2640, 2699, 2740, 2759, 2788, 2800, 2508, 2437, 2369, 2305, 2224, 2157, 2065, 1991, 1888, 1808, 1717, 1629, 1531, 1466, 1408, 1379, 1343, 1317, 1256, 1216, 1210, 1241, 1279, 1332, 1360, 1407, 1436, 1459, 1496, 1520, 1585, 1629, 1677, 1692, 1744, 1792, 1834, 1901, 1997, 2096, 2197, 2280, 2352, 2442, 2512, 2590, 2639, 2693, 2723, 2752, 2800, 2835, 2846, 2823, 2752, 2690, 2618, 2550, 2454, 2352, 2255, 2138, 1991, 1853, 1712, 1629, 1540, 1463, 1368, 1296, 1249, 1208, 1195, 1192, 1200, 1221, 1220, 1255, 1299, 1344, 1432, 1506, 1585, 1662, 1696, 1729, 1763, 1796, 1841, 1904, 1992, 2081, 2194, 2294, 2384, 2492, 2573, 2643, 2739, 2816, 2896, 2958, 2991, 2998, 2992, 2990, 2959, 2954, 2914, 2864, 2797, 2725, 2630, 2514, 2368, 2212, 2046, 1908, 1785, 1648, 1553, 1448, 1367, 1335, 1328, 1381, 1438, 1510, 1570, 1632, 1697, 1750, 1791, 1861, 1920, 2012, 2049, 2072, 2068, 2064, 2069, 2085, 2082, 2085, 2080, 2123, 2173, 2225, 2322, 2400, 2495, 2593, 2690, 2779, 2848, 2928, 2975, 3024, 3049, 3072, 3092, 3062, 3049, 3012, 2928, 2830, 2699, 2583, 2452, 2336, 2200, 2052, 1893, 1769, 1648, 1529, 1429, 1362, 1303, 1264, 1267, 1283, 1289, 1306, 1328, 1399, 1435, 1467, 1482, 1488, 1522, 1563, 1590, 1630, 1696, 1777, 1876, 1979, 2068, 2144, 2261, 2359, 2461, 2547, 2624, 2708, 2784, 2843, 2876, 2880, 2894, 2886, 2859, 2820, 2784, 2760, 2723, 2683, 2645, 2592, 2535, 2496, 2436, 2388, 2320, 2264, 2223, 2176, 2136, 2080, 2039, 1991, 1939, 1879, 1808, 1772, 1724, 1700, 1672, 1664, 1644, 1625, 1582, 1545, 1504, 1513, 1487, 1447, 1406, 1360, 1317, 1288, 1271, 1272, 1280, 1314, 1341, 1381, 1408, 1424, 1476, 1519, 1540, 1587, 1632, 1685, 1708, 1734, 1746, 1760, 1805, 1848, 1892, 1965, 2032, 2125, 2226, 2323, 2420, 2512, 2622, 2716, 2803, 2854, 2880, 2916, 2950, 2976, 2979, 2976, 3012, 3037, 3050, 3066, 3072, 3079, 3056, 3030, 3001, 2960, 2939, 2914, 2873, 2852, 2800, 2772, 2697, 2623, 2516, 2384, 2232, 2086, 1934, 1767, 1616, 1529, 1439, 1391, 1366, 1360, 1383, 1380, 1368, 1359, 1360, 1361.17238867507, 1362.35840704524, 1363.89611623667, 1366.12357737551, 1369.3788515879, 1374, 1403, 1451, 1490, 1520, 1540, 1568, 1609, 1654, 1664, 1688, 1687, 1689, 1711, 1712, 1762, 1805, 1830, 1844, 1872, 1915, 1924, 1923, 1943, 1968, 1982, 1997, 2025, 2038, 2080, 2132, 2162, 2195, 2229, 2256, 2263, 2286, 2293, 2314, 2304, 2323, 2325, 2325, 2307, 2272, 2250, 2226, 2183, 2145, 2080, 2013, 1939, 1907, 1876, 1840, 1832, 1845, 1859, 1865, 1840, 1835, 1826, 1807, 1802, 1792, 1804, 1811, 1810, 1828, 1840, 1852.14128310155, 1863.75110784182, 1875.8356830613, 1889.40121760049, 1905.45392029989, 1925, 1957, 1987, 2036, 2048, 2060, 2063, 2068, 2062, 2064, 2066, 2092, 2104, 2136, 2144, 2193, 2218, 2243, 2313, 2368, 2414, 2462, 2516, 2562, 2592, 2607, 2623, 2635, 2627, 2608, 2612, 2596, 2558, 2493, 2432, 2361, 2280, 2189, 2099, 2000, 1910, 1821, 1722, 1648, 1552, 1456, 1353, 1269, 1181, 1120, 1086, 1072, 1075, 1098, 1152, 1231, 1278, 1303, 1340, 1376, 1380, 1382, 1380, 1380, 1392, 1434, 1466, 1507, 1558, 1584, 2154, 2263, 2363, 2465, 2576, 2676, 2728, 2802, 2854, 2896, 2910.40504018009, 2919.93189016569, 2926.61768054865, 2932.49954192079, 2939.61460487396, 2950, 2967, 2978, 2960, 2944, 2959, 2983, 3010, 3061, 3104, 3180, 3235, 3257, 3267, 3280, 3297, 3323, 3352, 3399, 3456, 3531, 3595, 3648, 3680, 3696, 3743, 3783, 3799, 3824, 3808, 3759, 3650, 3519, 3347, 3168, 2962, 2789, 2605, 2441, 2272, 2155, 2034, 1955, 1892, 1840, 1797, 1780, 1747, 1714, 1664, 1634, 1602, 1605, 1576, 1520, 1501, 1484, 1450, 1426, 1408, 1374, 1322, 1267, 1207, 1168, 1178, 1186, 1187, 1189, 1184, 1233, 1254, 1246, 1218, 1184, 1215, 1217, 1216, 1216, 1184, 1168, 1156, 1138, 1114, 1104, 1073, 1013, 950, 903, 848, 823, 788, 782, 785, 800, 857, 910, 962, 1050, 1120, 1198, 1252, 1316, 1370, 1424, 1477, 1531, 1577, 1617, 1632, 1690, 1723, 1747, 1777, 1792, 1798, 1803, 1804, 1816, 1808, 1825, 1812, 1800, 1789, 1792, 1833, 1838, 1854, 1863, 1840, 1875, 1886, 1875, 1874, 1888, 1900, 1918, 1948, 2000, 2016, 2045, 2041, 2002, 1959, 1936, 1916, 1907, 1912, 1903, 1888, 1926, 1957, 2046, 2113, 2192, 2300, 2401, 2464, 2518, 2560, 2583, 2579, 2561, 2513, 2464, 2435, 2411, 2400, 2421, 2448, 2695, 2698, 2688, 2665, 2624, 2596, 2575, 2543, 2475, 2416, 2341, 2269, 2192, 2114, 2032, 1940, 1829, 1736, 1627, 1552, 1474, 1405, 1335, 1312, 1296, 1313, 1331, 1357, 1368, 1408, 1422.96159326075, 1431.7816553758, 1437.67785672619, 1443.86786769299, 1453.56935865724, 1470, 1526, 1604, 1694, 1760, 1847, 1964, 2083, 2187, 2272, 2383, 2478, 2577, 2661, 2720, 2811, 2878, 2919, 2938, 2928, 2935, 2927, 2926, 2916, 2880, 2859, 2788, 2753, 2692, 2656, 2590, 2533, 2475, 2418, 2368, 2328, 2303, 2263, 2205, 2176, 2141, 2140, 2099, 2088, 2096
        };

        long[] inputTimestamp = new long[] { //TODO: This time should be in unix time (milliseconds)
//                1389899835824.25, 1389899835871.12, 1389899835918, 1389899835964.88, 1389899836011.75, 1389899836058.62, 1389899836105.5, 1389899836152.38, 1389899836199.25, 1389899836246.12, 1389899836293, 1389899836339.88, 1389899836386.75, 1389899836433.62, 1389899836480.5, 1389899836527.38, 1389899836574.25, 1389899836621.12, 1389899836668, 1389899836714.88, 1389899836761.75, 1389899836808.62, 1389899836855.5, 1389899836902.38, 1389899836949.25, 1389899836996.12, 1389899837043, 1389899837089.88, 1389899837136.75, 1389899837183.62, 1389899837230.5, 1389899837277.38, 1389899837324.25, 1389899837371.12, 1389899837418, 1389899837464.88, 1389899837511.75, 1389899837558.62, 1389899837605.5, 1389899837652.38, 1389899837699.25, 1389899837746.12, 1389899837793, 1389899837839.88, 1389899837886.75, 1389899837933.62, 1389899837980.5, 1389899838027.38, 1389899838074.25, 1389899838121.12, 1389899838168, 1389899838214.88, 1389899838261.75, 1389899838308.62, 1389899838355.5, 1389899838402.38, 1389899838449.25, 1389899838496.12, 1389899838543, 1389899838589.88, 1389899838636.75, 1389899838683.62, 1389899838730.5, 1389899838777.38, 1389899838824.25, 1389899838871.12, 1389899838918, 1389899838964.88, 1389899839011.75, 1389899839058.62, 1389899839105.5, 1389899839152.38, 1389899839199.25, 1389899839246.12, 1389899839293, 1389899839339.88, 1389899839386.75, 1389899839433.62, 1389899839480.5, 1389899839527.38, 1389899839574.25, 1389899839621.12, 1389899839668, 1389899839714.88, 1389899839761.75, 1389899839808.62, 1389899839855.5, 1389899839902.38, 1389899839949.25, 1389899839996.12, 1389899840043, 1389899840089.88, 1389899840136.75, 1389899840183.62, 1389899840230.5, 1389899840277.38, 1389899840324.25, 1389899840371.12, 1389899840418, 1389899840464.88, 1389899840511.75, 1389899840558.62, 1389899840605.5, 1389899840652.38, 1389899840699.25, 1389899840746.12, 1389899840793, 1389899840839.88, 1389899840886.75, 1389899840933.62, 1389899840980.5, 1389899841027.38, 1389899841074.25, 1389899841121.12, 1389899841168, 1389899841214.88, 1389899841261.75, 1389899841308.62, 1389899841355.5, 1389899841402.38, 1389899841449.25, 1389899841496.12, 1389899841543, 1389899841589.88, 1389899841636.75, 1389899841683.62, 1389899841730.5, 1389899841777.38, 1389899841824.25, 1389899841871.12, 1389899841918, 1389899841964.88, 1389899842011.75, 1389899842058.62, 1389899842105.5, 1389899842152.38, 1389899842199.25, 1389899842246.12, 1389899842293, 1389899842339.88, 1389899842386.75, 1389899842433.62, 1389899842480.5, 1389899842527.38, 1389899842574.25, 1389899842621.12, 1389899842668, 1389899842714.88, 1389899842761.75, 1389899842808.62, 1389899842855.5, 1389899842902.38, 1389899842949.25, 1389899842996.12, 1389899843043, 1389899843089.88, 1389899843136.75, 1389899843183.62, 1389899843230.5, 1389899843277.38, 1389899843324.25, 1389899843371.12, 1389899843418, 1389899843464.88, 1389899843511.75, 1389899843558.62, 1389899843605.5, 1389899843652.38, 1389899843699.25, 1389899843746.12, 1389899843793, 1389899843839.88, 1389899843886.75, 1389899843933.62, 1389899843980.5, 1389899844027.38, 1389899844074.25, 1389899844121.12, 1389899844168, 1389899844214.88, 1389899844261.75, 1389899844308.62, 1389899844355.5, 1389899844402.38, 1389899844449.25, 1389899844496.12, 1389899844543, 1389899844589.88, 1389899844636.75, 1389899844683.62, 1389899844730.5, 1389899844777.38, 1389899844824.25, 1389899844871.12, 1389899844918, 1389899844964.88, 1389899845011.75, 1389899845058.62, 1389899845105.5, 1389899845152.38, 1389899845199.25, 1389899845246.12, 1389899845293, 1389899845339.88, 1389899845386.75, 1389899845433.62, 1389899845480.5, 1389899845527.38, 1389899845574.25, 1389899845621.12, 1389899845668, 1389899845714.88, 1389899845761.75, 1389899845808.62, 1389899845855.5, 1389899845902.38, 1389899845949.25, 1389899845996.12, 1389899846043, 1389899846089.88, 1389899846136.75, 1389899846183.62, 1389899846230.5, 1389899846277.38, 1389899846324.25, 1389899846371.12, 1389899846418, 1389899846464.88, 1389899846511.75, 1389899846558.62, 1389899846605.5, 1389899846652.38, 1389899846699.25, 1389899846746.12, 1389899846793, 1389899846839.88, 1389899846886.75, 1389899846933.62, 1389899846980.5, 1389899847027.38, 1389899847074.25, 1389899847121.12, 1389899847168, 1389899847214.88, 1389899847261.75, 1389899847308.62, 1389899847355.5, 1389899847402.38, 1389899847449.25, 1389899847496.12, 1389899847543, 1389899847589.88, 1389899847636.75, 1389899847683.62, 1389899847730.5, 1389899847777.38, 1389899847824.25, 1389899847871.12, 1389899847918, 1389899847964.88, 1389899848011.75, 1389899848058.62, 1389899848105.5, 1389899848152.38, 1389899848199.25, 1389899848246.12, 1389899848293, 1389899848339.88, 1389899848386.75, 1389899848433.62, 1389899848480.5, 1389899848527.38, 1389899848574.25, 1389899848621.12, 1389899848668, 1389899848714.88, 1389899848761.75, 1389899848808.62, 1389899848855.5, 1389899848902.38, 1389899848949.25, 1389899848996.12, 1389899849043, 1389899849089.88, 1389899849136.75, 1389899849183.62, 1389899849230.5, 1389899849277.38, 1389899849324.25, 1389899849371.12, 1389899849418, 1389899849464.88, 1389899849511.75, 1389899849558.62, 1389899849605.5, 1389899849652.38, 1389899849699.25, 1389899849746.12, 1389899849793, 1389899849839.88, 1389899849886.75, 1389899849933.62, 1389899849980.5, 1389899850027.38, 1389899850074.25, 1389899850121.12, 1389899850168, 1389899850214.88, 1389899850261.75, 1389899850308.62, 1389899850355.5, 1389899850402.38, 1389899850449.25, 1389899850496.12, 1389899850543, 1389899850589.88, 1389899850636.75, 1389899850683.62, 1389899850730.5, 1389899850777.38, 1389899850824.25, 1389899850871.12, 1389899850918, 1389899850964.88, 1389899851011.75, 1389899851058.62, 1389899851105.5, 1389899851152.38, 1389899851199.25, 1389899851246.12, 1389899851293, 1389899851339.88, 1389899851386.75, 1389899851433.62, 1389899851480.5, 1389899851527.38, 1389899851574.25, 1389899851621.12, 1389899851668, 1389899851714.88, 1389899851761.75, 1389899851808.62, 1389899851855.5, 1389899851902.38, 1389899851949.25, 1389899851996.12, 1389899852043, 1389899852089.88, 1389899852136.75, 1389899852183.62, 1389899852230.5, 1389899852277.38, 1389899852324.25, 1389899852371.12, 1389899852418, 1389899852464.88, 1389899852511.75, 1389899852558.62, 1389899852605.5, 1389899852652.38, 1389899852699.25, 1389899852746.12, 1389899852793, 1389899852839.88, 1389899852886.75, 1389899852933.62, 1389899852980.5, 1389899853027.38, 1389899853074.25, 1389899853121.12, 1389899853168, 1389899853214.88, 1389899853261.75, 1389899853308.62, 1389899853355.5, 1389899853402.38, 1389899853449.25, 1389899853496.12, 1389899853543, 1389899853589.88, 1389899853636.75, 1389899853683.62, 1389899853730.5, 1389899853777.38, 1389899853824.25, 1389899853871.12, 1389899853918, 1389899853964.88, 1389899854011.75, 1389899854058.62, 1389899854105.5, 1389899854152.38, 1389899854199.25, 1389899854246.12, 1389899854293, 1389899854339.88, 1389899854386.75, 1389899854433.62, 1389899854480.5, 1389899854527.38, 1389899854574.25, 1389899854621.12, 1389899854668, 1389899854714.88, 1389899854761.75, 1389899854808.62, 1389899854855.5, 1389899854902.38, 1389899854949.25, 1389899854996.12, 1389899855043, 1389899855089.88, 1389899855136.75, 1389899855183.62, 1389899855230.5, 1389899855277.38, 1389899855324.25, 1389899855371.12, 1389899855418, 1389899855464.88, 1389899855511.75, 1389899855558.62, 1389899855605.5, 1389899855652.38, 1389899855699.25, 1389899855746.12, 1389899855793, 1389899855839.88, 1389899855886.75, 1389899855933.62, 1389899855980.5, 1389899856027.38, 1389899856074.25, 1389899856121.12, 1389899856168, 1389899856214.88, 1389899856261.75, 1389899856308.62, 1389899856355.5, 1389899856402.38, 1389899856449.25, 1389899856496.12, 1389899856543, 1389899856589.88, 1389899856636.75, 1389899856683.62, 1389899856730.5, 1389899856777.38, 1389899856824.25, 1389899856871.12, 1389899856918, 1389899856964.88, 1389899857011.75, 1389899857058.62, 1389899857105.5, 1389899857152.38, 1389899857199.25, 1389899857246.12, 1389899857293, 1389899857339.88, 1389899857386.75, 1389899857433.62, 1389899857480.5, 1389899857527.38, 1389899857574.25, 1389899857621.12, 1389899857668, 1389899857714.88, 1389899857761.75, 1389899857808.62, 1389899857855.5, 1389899857902.38, 1389899857949.25, 1389899857996.12, 1389899858043, 1389899858089.88, 1389899858136.75, 1389899858183.62, 1389899858230.5, 1389899858277.38, 1389899858324.25, 1389899858371.12, 1389899858418, 1389899858464.88, 1389899858511.75, 1389899858558.62, 1389899858605.5, 1389899858652.38, 1389899858699.25, 1389899858746.12, 1389899858793, 1389899858839.88, 1389899858886.75, 1389899858933.62, 1389899858980.5, 1389899859027.38, 1389899859074.25, 1389899859121.12, 1389899859168, 1389899859214.88, 1389899859261.75, 1389899859308.62, 1389899859355.5, 1389899859402.38, 1389899859449.25, 1389899859496.12, 1389899859543, 1389899859589.88, 1389899859636.75, 1389899859683.62, 1389899859730.5, 1389899859777.38, 1389899859824.25, 1389899859871.12, 1389899859918, 1389899859964.88, 1389899860011.75, 1389899860058.62, 1389899860105.5, 1389899860152.38, 1389899860199.25, 1389899860246.12, 1389899860293, 1389899860339.88, 1389899860386.75, 1389899860433.62, 1389899860480.5, 1389899860527.38, 1389899860574.25, 1389899860621.12, 1389899860668, 1389899860714.88, 1389899860761.75, 1389899860808.62, 1389899860855.5, 1389899860902.38, 1389899860949.25, 1389899860996.12, 1389899861043, 1389899861089.88, 1389899861136.75, 1389899861183.62, 1389899861230.5, 1389899861277.38, 1389899861324.25, 1389899861371.12, 1389899861418, 1389899861464.88, 1389899861511.75, 1389899861558.62, 1389899861605.5, 1389899861652.38, 1389899861699.25, 1389899861746.12, 1389899861793, 1389899861839.88, 1389899861886.75, 1389899861933.62, 1389899861980.5, 1389899862027.38, 1389899862074.25, 1389899862121.12, 1389899862168, 1389899862214.88, 1389899862261.75, 1389899862308.62, 1389899862355.5, 1389899862402.38, 1389899862449.25, 1389899862496.12, 1389899862543, 1389899862589.88, 1389899862636.75, 1389899862683.62, 1389899862730.5, 1389899862777.38, 1389899862824.25, 1389899862871.12, 1389899862918, 1389899862964.88, 1389899863011.75, 1389899863058.62, 1389899863105.5, 1389899863152.38, 1389899863199.25, 1389899863246.12, 1389899863293, 1389899863339.88, 1389899863386.75, 1389899863433.62, 1389899863480.5, 1389899863527.38, 1389899863574.25, 1389899863621.12, 1389899863668, 1389899863714.88, 1389899863761.75, 1389899863808.62, 1389899863855.5, 1389899863902.38, 1389899863949.25, 1389899863996.12, 1389899864043, 1389899864089.88, 1389899864136.75, 1389899864183.62, 1389899864230.5, 1389899864277.38, 1389899864324.25, 1389899864371.12, 1389899864418, 1389899864464.88, 1389899864511.75, 1389899864558.62, 1389899864605.5, 1389899864652.38, 1389899864699.25, 1389899864746.12, 1389899864793, 1389899864839.88, 1389899864886.75, 1389899864933.62, 1389899864980.5, 1389899865027.38, 1389899865074.25, 1389899865121.12, 1389899865168, 1389899865214.88, 1389899865261.75, 1389899865308.62, 1389899865355.5, 1389899865402.38, 1389899865449.25, 1389899865496.12, 1389899865543, 1389899865589.88, 1389899865636.75, 1389899865683.62, 1389899865730.5, 1389899865777.38, 1389899865824.25, 1389899865871.12, 1389899865918, 1389899865964.88, 1389899866011.75, 1389899866058.62, 1389899866105.5, 1389899866152.38, 1389899866199.25, 1389899866246.12, 1389899866293, 1389899866339.88, 1389899866386.75, 1389899866433.62, 1389899866480.5, 1389899866527.38, 1389899866574.25, 1389899866621.12, 1389899866668, 1389899866714.88, 1389899866761.75, 1389899866808.62, 1389899866855.5, 1389899866902.38, 1389899866949.25, 1389899866996.12, 1389899867043, 1389899867089.88, 1389899867136.75, 1389899867183.62, 1389899867230.5, 1389899867277.38, 1389899867324.25, 1389899867371.12, 1389899867418, 1389899867464.88, 1389899867511.75, 1389899867558.62, 1389899867605.5, 1389899867652.38, 1389899867699.25, 1389899867746.12, 1389899867793, 1389899867839.88, 1389899867886.75, 1389899867933.62, 1389899867980.5, 1389899868027.38, 1389899868074.25, 1389899868121.12, 1389899868168, 1389899868214.88, 1389899868261.75, 1389899868308.62, 1389899868355.5, 1389899868402.38, 1389899868449.25, 1389899868496.12, 1389899868543, 1389899868589.88, 1389899868636.75, 1389899868683.62, 1389899868730.5, 1389899868777.38, 1389899868824.25, 1389899868871.12, 1389899868918, 1389899868964.88, 1389899869011.75, 1389899869058.62, 1389899869105.5, 1389899869152.38, 1389899869199.25, 1389899869246.12, 1389899869293, 1389899869339.88, 1389899869386.75, 1389899869433.62, 1389899869480.5, 1389899869527.38, 1389899869574.25, 1389899869621.12, 1389899869668, 1389899869714.88, 1389899869761.75, 1389899869808.62, 1389899869855.5, 1389899869902.38, 1389899869949.25, 1389899869996.12, 1389899870043, 1389899870089.88, 1389899870136.75, 1389899870183.62, 1389899870230.5, 1389899870277.38, 1389899870324.25, 1389899870371.12, 1389899870418, 1389899870464.88, 1389899870511.75, 1389899870558.62, 1389899870605.5, 1389899870652.38, 1389899870699.25, 1389899870746.12, 1389899870793, 1389899870839.88, 1389899870886.75, 1389899870933.62, 1389899870980.5, 1389899871027.38, 1389899871074.25, 1389899871121.12, 1389899871168, 1389899871214.88, 1389899871261.75, 1389899871308.62, 1389899871355.5, 1389899871402.38, 1389899871449.25, 1389899871496.12, 1389899871543, 1389899871589.88, 1389899871636.75, 1389899871683.62, 1389899871730.5, 1389899871777.38, 1389899871824.25, 1389899871871.12, 1389899871918, 1389899871964.88, 1389899872011.75, 1389899872058.62, 1389899872105.5, 1389899872152.38, 1389899872199.25, 1389899872246.12, 1389899872293, 1389899872339.88, 1389899872386.75, 1389899872433.62, 1389899872480.5, 1389899872527.38, 1389899872574.25, 1389899872621.12, 1389899872668, 1389899872714.88, 1389899872761.75, 1389899872808.62, 1389899872855.5, 1389899872902.38, 1389899872949.25, 1389899872996.12, 1389899873043, 1389899873089.88, 1389899873136.75, 1389899873183.62, 1389899873230.5, 1389899873277.38, 1389899873324.25, 1389899873371.12, 1389899873418, 1389899873464.88, 1389899873511.75, 1389899873558.62, 1389899873605.5, 1389899873652.38, 1389899873699.25, 1389899873746.12, 1389899873793, 1389899873839.88, 1389899873886.75, 1389899873933.62, 1389899873980.5, 1389899874027.38, 1389899874074.25, 1389899874121.12, 1389899874168, 1389899874214.88, 1389899874261.75, 1389899874308.62, 1389899874355.5, 1389899874402.38, 1389899874449.25, 1389899874496.12, 1389899874543, 1389899874589.88, 1389899874636.75, 1389899874683.62, 1389899874730.5, 1389899874777.38, 1389899874824.25, 1389899874871.12, 1389899874918, 1389899874964.88, 1389899875011.75, 1389899875058.62, 1389899875105.5, 1389899875152.38, 1389899875199.25, 1389899875246.12, 1389899875293, 1389899875339.88, 1389899875386.75, 1389899875433.62, 1389899875480.5, 1389899875527.38, 1389899875574.25, 1389899875621.12, 1389899875668, 1389899875714.88, 1389899875761.75, 1389899875808.62, 1389899875855.5, 1389899875902.38, 1389899875949.25, 1389899875996.12, 1389899876043, 1389899876089.88, 1389899876136.75, 1389899876183.62, 1389899876230.5, 1389899876277.38, 1389899876324.25, 1389899876371.12, 1389899876418, 1389899876464.88, 1389899876511.75, 1389899876558.62, 1389899876605.5, 1389899876652.38, 1389899876699.25, 1389899876746.12, 1389899876793, 1389899876839.88, 1389899876886.75, 1389899876933.62, 1389899876980.5, 1389899877027.38, 1389899877074.25, 1389899877121.12, 1389899877168, 1389899877214.88, 1389899877261.75, 1389899877308.62, 1389899877355.5, 1389899877402.38, 1389899877449.25, 1389899877496.12, 1389899877543, 1389899877589.88, 1389899877636.75, 1389899877683.62, 1389899877730.5, 1389899877777.38, 1389899877824.25, 1389899877871.12, 1389899877918, 1389899877964.88, 1389899878011.75, 1389899878058.62, 1389899878105.5, 1389899878152.38, 1389899878199.25, 1389899878246.12, 1389899878293, 1389899878339.88, 1389899878386.75, 1389899878433.62, 1389899878480.5, 1389899878527.38, 1389899878574.25, 1389899878621.12, 1389899878668, 1389899878714.88, 1389899878761.75, 1389899878808.62, 1389899878855.5, 1389899878902.38, 1389899878949.25, 1389899878996.12, 1389899879043, 1389899879089.88, 1389899879136.75, 1389899879183.62, 1389899879230.5, 1389899879277.38, 1389899879324.25, 1389899879371.12, 1389899879418, 1389899879464.88, 1389899879511.75, 1389899879558.62, 1389899879605.5, 1389899879652.38, 1389899879699.25, 1389899879746.12, 1389899879793, 1389899879839.88, 1389899879886.75, 1389899879933.62, 1389899879980.5, 1389899880027.38, 1389899880074.25, 1389899880121.12, 1389899880168, 1389899880214.88, 1389899880261.75, 1389899880308.62, 1389899880355.5, 1389899880402.38, 1389899880449.25, 1389899880496.12, 1389899880543, 1389899880589.88, 1389899880636.75, 1389899880683.62, 1389899880730.5, 1389899880777.38, 1389899880824.25, 1389899880871.12, 1389899880918, 1389899880964.88, 1389899881011.75, 1389899881058.62, 1389899881105.5, 1389899881152.38, 1389899881199.25, 1389899881246.12, 1389899881293, 1389899881339.88, 1389899881386.75, 1389899881433.62, 1389899881480.5, 1389899881527.38, 1389899881574.25, 1389899881621.12, 1389899881668, 1389899881714.88, 1389899881761.75, 1389899881808.62, 1389899881855.5, 1389899881902.38, 1389899881949.25, 1389899881996.12, 1389899882043, 1389899882089.88, 1389899882136.75, 1389899882183.62, 1389899882230.5, 1389899882277.38, 1389899882324.25, 1389899882371.12, 1389899882418, 1389899882464.88, 1389899882511.75, 1389899882558.62, 1389899882605.5, 1389899882652.38
        };

        DataPoint[] rip = new DataPoint[inputData.length];
        for(int i=0; i<rip.length; i++) {
            rip[i] = new DataPoint(inputData[i],i);
        }

        SensorConfiguration sensorConfig = new SensorConfiguration();
        sensorConfig.add("RIP", 64.0 / 3.0, AUTOSENSE.CHEST_RIP);
        PeakValley result = Library.peakvalley_v2(rip,sensorConfig);

        int[] resultValley = new int[result.valleyIndex.size()];
        int[] resultPeak = new int[result.peakIndex.size()];        
        
        for(int i=0; i<resultValley.length; i++) {
            resultValley[i] = result.valleyIndex.get(i);
        }
        for(int i=0; i<resultPeak.length; i++) {
            resultPeak[i] = result.peakIndex.get(i);
        }        
        
        int[] correctValley = new int[] { 225,   280,   333,   384,   440};
        int[] correctPeak = new int[] { 257,   311,   364, 420, 470};


        assertArrayEquals(correctValley,resultValley);
        assertArrayEquals(correctPeak,resultPeak);


    }

    @Test
    public void testMac() throws Exception {

    }

    @Test
    public void testInterceptOutlierDetectorRIPLamia() throws Exception {

    }
}